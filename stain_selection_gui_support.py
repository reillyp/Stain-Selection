#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Sep 06, 2019 01:15:19 PM CDT  platform: Windows NT
#    Sep 06, 2019 02:15:18 PM CDT  platform: Windows NT
#    Sep 09, 2019 03:30:42 PM CDT  platform: Windows NT
#    Sep 09, 2019 03:44:23 PM CDT  platform: Windows NT
#    Sep 09, 2019 04:00:20 PM CDT  platform: Windows NT
#    Sep 09, 2019 04:02:43 PM CDT  platform: Windows NT
#    Sep 11, 2019 11:39:07 AM CDT  platform: Windows NT
#    Sep 11, 2019 11:46:45 AM CDT  platform: Windows NT
#    Sep 19, 2019 03:54:19 PM CDT  platform: Windows NT

# http://introtopython.org/classes.html includes storing a class as a module

import sys
import re
from tkinter import filedialog
from tkinter import *
import datetime
import time
import os
import os.path
import pathlib
from os import path
from tkinter import messagebox
from pathlib import Path
import cv2
import numpy as np

from SelectStains import SelectStains
  
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

class ThresholdList():

    def __init__(self, first_val, second_val, third_val):

        self.valid_HSV_values = True        

        try:
            self.thresh_list = [int(first_val), int(second_val), int(third_val)]
        except Exception as e:
            messagebox.showerror("HSV Threshold Error", "HSV Threshold Error: " +str(e))

        for val in self.thresh_list:
            if val < 0: 
                messagebox.showerror("HSV Threshold Value Error", "HSV Threshold Error: Entry less than 0! ONLY ENTER VALUES FROM 0 TO 255")
                self.valid_HSV_values = False
            elif val > 255 : 
                messagebox.showerror("HSV Threshold Value Error", "HSV Threshold Error: Entry greater than 255! ONLY ENTER VALUES FROM 0 TO 255")
                self.valid_HSV_values = False
                
    def getThresholdList(self):
        return self.thresh_list
    
    def getValidHSVValues(self):
        return self.valid_HSV_values

## Instantiate an instance of the SelectStains class.
new_image = SelectStains()

def set_Tk_var():
    global low_hue
    low_hue = tk.StringVar()
    low_hue.set("71")
    global low_sat
    low_sat = tk.StringVar()
    low_sat.set("56")
    global low_val
    low_val = tk.StringVar()
    low_val.set("100")
    global up_hue
    up_hue = tk.StringVar()
    up_hue.set("171")
    global up_sat
    up_sat = tk.StringVar()
    up_sat.set("156")
    global up_val
    up_val = tk.StringVar()
    up_val.set("190")
    global area_thresh
    area_thresh = tk.StringVar()
    area_thresh.set("290")
    global gaussian_blur
    gaussian_blur = tk.StringVar()
    gaussian_blur.set("15")

def btn_exit(p1):
    print('stain_selection_gui_support.btn_exit')
    sys.stdout.flush()
    destroy_window()

def btn_select_input_img(p1):
    input_img = ''
    input_img = filedialog.askopenfilename(initialdir = "/",title = "Select file",\
                      filetypes = (("tif images","*.tif *.tiff"),("jpg images","*.jpg"),("all files","*.*")))
    if input_img == '':
        messagebox.showerror("Input Image Error", "Input Image Error: No image is selected!") 
    else:
        input_img_lbl =("Input Img: {}".format(input_img))
        w.LabelInputImg.configure(text=input_img_lbl)
        base_ext=os.path.basename(input_img)
        base = os.path.splitext(base_ext)[0]
        new_image.setImageIn(input_img, base_ext, base)
        new_image.variableCheck()  
        sys.stdout.flush()

def btn_select_output_dir(p1):
    print('stain_selection_gui_support.btn_select_output_dir')
 
    dirname = ''
    dirname = filedialog.askdirectory(initialdir=os.getcwd(),title='Please select a directory')
    if dirname != '':
        output_dir_lbl =("Ouput Dir: {}".format(dirname))
        w.LabelOutDir.configure(text=output_dir_lbl)
        new_image.setOutputDir(dirname)
    else:
        ## Defaults output directory to folder containing this program.
        dirname = os.getcwd()
        print ("\nNo directory selected - initializing with {} \n" .format(os.getcwd()))
        output_dir_lbl =("Ouput Dir: {}".format(dirname))
        w.LabelOutDir.configure(text=output_dir_lbl)
        new_image.setOutputDir(dirname)

    sys.stdout.flush()

def btn_select_stains(p1):
    print('stain_selection_gui_support.btn_select_stains')

    # Lower HSV threshold for stain selection
    lower_threshold_list = ThresholdList(low_hue.get(), low_sat.get(), low_val.get())

    # Upper HSV threshold for stain selection
    upper_threshold_list = ThresholdList(up_hue.get(), up_sat.get(), up_val.get())
    # Minimum area for region to be selected

    try:
        gaussian_blur_value = int(gaussian_blur.get())
    except Exception as e:
        messagebox.showerror("Gaussian Blur Error", "Gaussian Blur Error: " +str(e)) 

    try:
        area_threshold_value = int(area_thresh.get())
    except Exception as e:
        messagebox.showerror("Area Threshold Error", "Area Threshold Error: " +str(e)) 
    
    # Only pass valid HSV values to SelectStain class
    if (lower_threshold_list.getValidHSVValues()) and (upper_threshold_list.getValidHSVValues()):
        new_image.setHSVThresholdsBlurArea(lower_threshold_list.getThresholdList(), upper_threshold_list.getThresholdList(), gaussian_blur_value, area_threshold_value)
    else:
        messagebox.showerror("HSV Threshold Value Error", "Fix HSV Threshold Error: ONLY ENTER VALUES FROM 0 TO 255")

    new_image.variableCheck()
    
    try:
        new_image.convertToHSV()
        sys.stdout.flush()
    except Exception as e:
        messagebox.showerror("Error", "Error: " +str(e))  
    sys.stdout.flush()

def prog_descript():
    print('stain_selection_gui_support.prog_descript')
    sys.stdout.flush()
##    import prog_descr
##    prog_descr.create_ProgDesc(root)
    os.startfile("Stain Selection Program Description.pdf")

def prog_instruct():
    print('stain_selection_gui_support.prog_instruct')
    sys.stdout.flush()
##    import prog_instruct
##    prog_instruct.create_ProgInstruct(root)
    os.startfile("Stain Selection Instructions.pdf")

# This MAY be best handle in Stain Selection Class.
def write_results():
    # Write output images to designated directory.
    output_file_object_mask = dirname+"/"+base+"-object-mask.jpg"
    print(output_file_object_mask)    
    cv2.imshow(output_file_object_mask,img)
    cv2.imwrite(output_file_object_mask,img)

def quit():
    print('stain_selection_gui_support.quit')
    sys.stdout.flush()
    destroy_window()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import stain_selection_gui
    stain_selection_gui.vp_start_gui()




